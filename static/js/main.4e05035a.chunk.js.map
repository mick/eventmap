{"version":3,"sources":["EventList.js","SearchBar.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["require","MAX_DAYS_IN_LIST","EventTimes","props","rawTimes","sortedTimesByDate","groupBy","sortBy","item","start","unix","format","sortedDates","Object","keys","sort","dateRowFactory","date","times","dayStr","timeStrs","map","time","range","hideDate","join","key","length","nextDay","lastDay","nextStart","lastStart","slice","concat","twix","allDay","EventList","visableEvents","locationFilter","events","filter","event","locationKey","location","longitude","latitude","eventCount","inViewEvents","listEvents","i","timeslot","moment","start_date","end","end_date","href","className","target","eventlocation","onMouseEnter","updatedHover","getAttribute","center","onMouseLeave","push","SearchBar","useState","input","setInput","eventlist","locFilt","nearby","onSubmit","preventDefault","updateZip","id","type","value","onChange","replacedVal","replace","placeholder","required","minLength","maxLength","Map","locations","setLocations","mapReady","setMapReady","useRef","prevHighlightId","useEffect","mapboxgl","accessToken","current","container","style","zoom","hash","on","_","addSource","features","addLayer","e","setLocationFilter","properties","getZoom","jumpTo","geometry","coordinates","getCanvas","cursor","queryRenderedFeatures","layers","inView","forEach","f","currentId","locKey","highlightedEvent","setFeatureState","source","highlight","geojson","values","getSource","setData","parseFloat","App","setEvents","currZip","setCurrZip","setHighlightedEvent","setInViewEvents","fetch","then","res","json","data","newZip","newHover","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e05035a.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport groupBy from 'lodash.groupby';\nimport sortBy from 'lodash.sortby';\nrequire('twix');\n\nconst MAX_DAYS_IN_LIST = 4;\n\nfunction EventTimes(props) {\n  const { rawTimes } = props;\n  let sortedTimesByDate = groupBy(sortBy(rawTimes,\n    // Sort all of the ranges by when they start;\n    // Unix returns the millisecond time, so all\n    // events will be different\n    (item) => { return item.start.unix() }),\n    // Group the ranges by the day they happen on;\n    // fully including the year, month, and day\n    // in that order guarantees that normal sorting\n    // will respect 9/31 v 10/1, and 2020/01 vs 2019/12\n    (item) => { return item.start.format('YYYY-MM-DD') }\n  )\n\n  let sortedDates = Object.keys(sortedTimesByDate).sort();\n\n  const dateRowFactory = (date) => {\n    let times = sortedTimesByDate[date];\n    let dayStr = times[0].start.format('ddd M/D')\n    let timeStrs = times.map((time) => time.range.format({ hideDate : true })).join(', ')\n    return (\n      <p key={`time-${date}`}>\n        { dayStr }{' | '}{ timeStrs }\n      </p>\n    )\n  }\n\n  if (sortedDates.length <= MAX_DAYS_IN_LIST) {\n    return sortedDates.map(dateRowFactory)\n  } else {\n    let nextDay = sortedDates[MAX_DAYS_IN_LIST - 1];\n    let lastDay = sortedDates[sortedDates.length - 1];\n    let nextStart = sortedTimesByDate[nextDay][0].start;\n    let lastStart = sortedTimesByDate[lastDay][0].start;\n    return sortedDates.slice(0,MAX_DAYS_IN_LIST - 1).map(dateRowFactory).concat(\n      <p>\n        More Times from {nextStart.twix(lastStart, { allDay : true }).format()}\n      </p>\n    )\n  }\n}\n\nexport function EventList(props) {\n\n  var visableEvents = [];\n  if (props.locationFilter) {\n    visableEvents = props.events.filter(event => {\n        event.locationKey = event.location.location.longitude + '&' + event.location.location.latitude;\n        return (props.locationFilter === event.locationKey);\n    })\n  } else {\n    // Filter based on the events that are currently in view.\n    var eventCount = 0;\n    visableEvents = props.events.filter(event => {\n      // limit to top matching events. to avoid list updating perf issues.\n      if (eventCount > 30) return false;\n      event.locationKey = event.location.location.longitude + '&' + event.location.location.latitude;\n      if (props.inViewEvents[event.locationKey]) {\n        eventCount +=1;\n        return true;\n      }\n      return false;\n    })\n  }\n\n  const listEvents = visableEvents.map((event, i) => {\n\n    // Normalize Mobilize's time formatting into\n    // easy-to-use moments\n    let rawTimes = event['timeslots'].map((timeslot) => {\n      let start = moment(timeslot.start_date * 1000);\n      let end = moment(timeslot.end_date * 1000);\n      return {\n        start, end,\n        range: start.twix(end)\n      }\n    })\n\n    return (\n      <a href={event['browser_url']}\n        className=\"eventCard\"\n        target=\"_blank\"\n        key={event['id']}\n        eventlocation={event['locationKey']}\n        onMouseEnter={(event) => { props.updatedHover({locationKey: event['currentTarget'].getAttribute('eventlocation'), center:false}) }}\n        onMouseLeave={(event) => { props.updatedHover({}) }}>\n        <li className=\"event\">\n          <div>\n            <h3>{event['title']}</h3>\n            <p><strong>{event['location']['venue']}</strong> in <strong>{event['location']['locality']}</strong></p>\n            <EventTimes rawTimes={rawTimes} />\n            <p className=\"eventRSVP\">Click to RSVP</p>\n          </div>\n        </li>\n      </a>\n    )\n  });\n\n  listEvents.push((<div className=\"eventCard\" key=\"noevent\"><li>\n    <div>\n      <p>\n        <strong>Don't see an event near you? </strong><br />\n        <a href=\"https://events.elizabethwarren.com/?is_virtual=true\" target=\"_blank\">Join a virtual event</a> or\n        <a href=\"https://events.elizabethwarren.com/event/create/\" target=\"_blank\">host your own event!</a>\n      </p>\n    </div>\n  </li></div>))\n\n  return (\n    <ul className=\"eventList\">{listEvents}</ul>\n  );\n}\n\nexport default EventList;\n","import React, { useState } from 'react';\nimport EventList from './EventList';\n\nexport function SearchBar(props){\n\n  const[input, setInput] = useState(\"\");\n\n  function onlySetNumbers(event){\n    let baseValue = event.target.value;\n    let replacedVal = baseValue.replace(/\\D*/g, '')\n    setInput(replacedVal)\n  }\n\n  function onSubmit(event){\n    event.preventDefault();\n    props.updateZip(input)\n  }\n\n  var eventlist = [];\n  if (props.locFilt !== null || props.nearby !== null) {\n    eventlist = (<EventList events={props.events} inViewEvents={props.inViewEvents} locationFilter={props.locationFilter} updatedHover={(item) => props.updatedHover(item)}/>)\n  }\n\n  return(\n    <div className={(props.locFilt !== null || props.nearby !== null) ? \"searchBar activeList\" : \"searchBar\"}>\n      <form onSubmit= {onSubmit} id = \"zipForm\">\n        <input type=\"text\" id=\"zipInput\" value={input} onChange={onlySetNumbers} placeholder=\"ZIP\" required minLength=\"5\" maxLength=\"5\"></input>\n      </form>\n      { eventlist }\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, { useState, useEffect, useRef } from 'react';\nimport mapboxgl from 'mapbox-gl';\n\nrequire('mapbox-gl/dist/mapbox-gl.css');\nexport function Map(props){\n\n  const [locations, setLocations] = useState({});\n  const [mapReady, setMapReady] = useState(false);\n  const map = useRef();\n  const prevHighlightId = useRef()\n\n  //First render\n  useEffect(() => {\n    // Create the map with US center\n    mapboxgl.accessToken = 'pk.eyJ1IjoibWlja3QiLCJhIjoiY2sxam1xNmtsMHU5aTNob2N4YndlYXV0byJ9.LWG413QaYVY9bN4kAFu9eg';\n\t\tmap.current = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mickt/ck0rlk9834i721clibn70ajsa',\n      zoom: 3,\n      hash: true,\n      center: [-98.5795, 39.8283]\n\t\t});\n    map.current.on('load', _ => {\n\n      map.current.addSource('locations', {\n        \"type\": \"geojson\",\n        \"data\": {type: 'FeatureCollection', features: []}\n      });\n\n\n      map.current.addLayer({\n        \"id\": \"event-locations\",\n        \"source\": \"locations\",\n        \"type\": \"symbol\",\n        \"layout\": {\n          \"icon-allow-overlap\": true,\n          \"icon-anchor\": \"bottom\",\n          \"icon-size\": 0.5,\n          \"icon-image\": \"w-marker-icon\"\n        },\n        \"paint\": {\n          \"icon-opacity\": [\n            \"match\", [\"feature-state\", \"highlight\"],\n            1, 0,\n            1\n          ]\n        }\n      });\n\n      map.current.addLayer({\n        \"id\": \"event-locations-highlight\",\n        \"source\": \"locations\",\n        \"type\": \"symbol\",\n        \"layout\": {\n          \"icon-allow-overlap\": true,\n          \"icon-image\": \"w-marker-icon-highlighted\",\n          \"icon-anchor\": \"bottom\",\n          \"icon-size\": 0.6\n        },\n        \"paint\": {\n          \"icon-opacity\": [\n            \"match\", [\"feature-state\", \"highlight\"],\n            1, 1,\n            0\n          ]\n        }\n      });\n\n      // Center the map on the coordinates of any clicked symbol from the 'symbols' layer.\n      map.current.on('click', function (e) {\n          props.setLocationFilter(null);\n      });\n\n      map.current.on('click', 'event-locations', function (e) {\n          props.setLocationFilter(e.features[0].properties.locationKey);\n          if (map.current.getZoom() < 8) {\n            map.current.jumpTo({center: e.features[0].geometry.coordinates, zoom: 10});\n          } else {\n            map.current.jumpTo({center: e.features[0].geometry.coordinates});\n          }\n\n      });\n\n\n      // Change the cursor to a pointer when the it enters a feature in the 'symbols' layer.\n      map.current.on('mouseenter', 'event-locations', function () {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n\n      // Change it back to a pointer when it leaves.\n      map.current.on('mouseleave', 'event-locations', function () {\n        map.current.getCanvas().style.cursor = '';\n      });\n\n      function inViewFeatures(e) {\n        var features = map.current.queryRenderedFeatures({ layers: ['event-locations', 'event-locations-highlight'] });\n        var inView = {};\n        features.forEach(f => {\n          inView[f.properties.locationKey] = true;\n        });\n        props.inViewEvents(inView);\n      }\n\n      // once the map settles in a location, then reset the features in view\n      map.current.on('idle', inViewFeatures);\n\n      setMapReady(true);\n    })\n  }, []);\n\n  function highlight(currentId, center) {\n    if (prevHighlightId.current) map.current.setFeatureState({source: 'locations', id: prevHighlightId.current}, { highlight: 0});\n\n    if (currentId) map.current.setFeatureState({source: 'locations', id: currentId}, { highlight: 1});\n\n    prevHighlightId.current = currentId;\n    if (center)\n    map.current.jumpTo({center: center, zoom: 10});\n  }\n\n  useEffect(() => {\n    if (mapReady === false) return;\n    // if list is fitlered to a location that marker is highlighted,\n    // otherwise if an event is hovered in the list.\n    var locKey = props.locationFilter || props.highlightedEvent.locationKey;\n    var id = (locations[locKey] && locations[locKey].id) || null;\n    highlight(id, props.highlightedEvent.center);\n  }, [ props.highlightedEvent, props.locationFilter, mapReady])\n\n\n  useEffect(() => {\n    if (mapReady === false) return;\n\n    var geojson = {type: 'FeatureCollection', features: Object.values(locations)};\n    map.current.getSource('locations').setData(geojson);\n  }, [locations, mapReady])\n\n  //Iterates through new events\n  useEffect(() => {\n    if (props.events === null) return;\n\n    //deduped locations, so we dont need to render multiple pins for the same location.\n    var locations = {};\n\n    props.events.forEach((e, i) => {\n\n      var locationKey = e.location.location.longitude + '&' + e.location.location.latitude;\n\n      locations[locationKey] = {\n        type: 'Feature',\n        id: i+1, // id based on iterator used for feature state lookups to highlight markers.\n        // 0 id doesnt work (bug)\n        properties:{\n          locationKey: locationKey\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: [\n            parseFloat(e.location.location.longitude),\n            parseFloat(e.location.location.latitude)\n          ]\n        }\n      };\n    });\n\n    setLocations(locations);\n  }, [props.events]);\n\n\n  return(\n    <div id=\"map\"></div>\n  );\n}\n\nexport default Map;\n","import React, {useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport Map from './Map';\nimport './App.scss';\n\nfunction App() {\n  //List of events\n  const [events, setEvents] = useState([]);\n  //Current zip code search - input by user\n  const [currZip, setCurrZip] = useState(null);\n  //Current highlighted event (hovered in the list)\n  const [highlightedEvent, setHighlightedEvent] = useState({});\n  //Used to filter by location, since there may be more than 1 event at a location.\n  //It's a string in the format lng+'&'+lat\n  const [locationFilter, setLocationFilter] = useState(null)\n  //Events that are within the map viewport.  These should be shown in the list.\n  // This is a object keyed by eventid and used to filter the `events` object.\n  const [inViewEvents, setInViewEvents] = useState({});\n\n  // Load all of the events\n  useEffect(() => {\n      fetch(\"https://warren-events.s3.amazonaws.com/data/events.json\")\n      .then((res)=>res.json())\n      .then((data)=>{\n        setEvents(data)\n      });\n  }, []);\n\n  useEffect(() => {\n    // Use the mobilizemaerica api to look up zipcode to nearest event.\n    if(currZip == null) return;\n    fetch(\"https://api.mobilize.us/v1/organizations/1316/events?timeslot_start=gte_now&zipcode=\" + currZip)\n    .then((res)=>res.json())\n    .then(res => {\n      if (res.data && res.data.length > 0){\n        let event = res.data[0]\n\n        setHighlightedEvent({id: event.id, center:[event.location.location.longitude, event.location.location.latitude]})\n      }\n    });\n\n    // Reset states on new zipcode\n    setInViewEvents({});\n    setHighlightedEvent({});\n    setLocationFilter(null);\n\n  }, [currZip])\n\n  return (\n    <div className=\"app\">\n      <SearchBar currZip={currZip} updateZip={(newZip) => setCurrZip(newZip)} events={events} inViewEvents={inViewEvents} updatedHover={(newHover) => setHighlightedEvent(newHover)} locationFilter={locationFilter}/>\n      <Map events={events} setLocationFilter={(locKey) => setLocationFilter(locKey)} highlightedEvent={highlightedEvent} inViewEvents={(keys) => setInViewEvents(keys)} locationFilter={locationFilter}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}