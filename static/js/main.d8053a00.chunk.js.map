{"version":3,"sources":["EventList.js","SearchBar.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["require","MAX_DAYS_IN_LIST","EventTimes","props","rawTimes","sortedTimesByDate","groupBy","sortBy","item","start","unix","format","sortedDates","Object","keys","sort","dateRowFactory","date","times","dayStr","timeStrs","map","time","range","hideDate","join","key","length","nextDay","lastDay","nextStart","lastStart","slice","concat","twix","allDay","EventList","useLayoutEffect","highlightedEvent","id","card","document","querySelector","scrollIntoView","inViewEvents","eventCount","listEvents","events","filter","event","i","timeslot","moment","start_date","end","end_date","liClass","href","className","target","eventid","onMouseEnter","updatedHover","getAttribute","center","onMouseLeave","push","SearchBar","useState","input","setInput","eventlist","locFilt","nearby","onSubmit","preventDefault","updateZip","type","value","onChange","replacedVal","replace","placeholder","required","minLength","maxLength","Map","locations","setLocations","mapReady","setMapReady","useRef","prevHighlightId","useEffect","mapboxgl","accessToken","current","container","style","zoom","hash","on","_","inViewFeatures","features","queryRenderedFeatures","layers","inView","forEach","f","addSource","addLayer","e","console","log","selectEvent","geometry","coordinates","getCanvas","cursor","currentId","setFeatureState","source","highlight","flyTo","geojson","getSource","setData","places","properties","parseFloat","location","longitude","latitude","App","setEvents","currZip","setCurrZip","setHighlightedEvent","setInViewEvents","fetch","then","res","json","data","newZip","newHover","newLoc","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8053a00.chunk.js","sourcesContent":["import React, { useLayoutEffect } from 'react';\nimport moment from 'moment';\nimport groupBy from 'lodash.groupby';\nimport sortBy from 'lodash.sortby';\nrequire('twix');\n\nconst MAX_DAYS_IN_LIST = 4;\n\nfunction EventTimes(props) {\n  const { rawTimes } = props;\n  let sortedTimesByDate = groupBy(sortBy(rawTimes,\n    // Sort all of the ranges by when they start;\n    // Unix returns the millisecond time, so all\n    // events will be different\n    (item) => { return item.start.unix() }),\n    // Group the ranges by the day they happen on;\n    // fully including the year, month, and day\n    // in that order guarantees that normal sorting\n    // will respect 9/31 v 10/1, and 2020/01 vs 2019/12\n    (item) => { return item.start.format('YYYY-MM-DD') }\n  )\n\n  let sortedDates = Object.keys(sortedTimesByDate).sort();\n\n  const dateRowFactory = (date) => {\n    let times = sortedTimesByDate[date];\n    let dayStr = times[0].start.format('ddd M/D')\n    let timeStrs = times.map((time) => time.range.format({ hideDate : true })).join(', ')\n    return (\n      <p key={`time-${date}`}>\n        { dayStr }{' | '}{ timeStrs }\n      </p>\n    )\n  }\n\n  if (sortedDates.length <= MAX_DAYS_IN_LIST) {\n    return sortedDates.map(dateRowFactory)\n  } else {\n    let nextDay = sortedDates[MAX_DAYS_IN_LIST - 1];\n    let lastDay = sortedDates[sortedDates.length - 1];\n    let nextStart = sortedTimesByDate[nextDay][0].start;\n    let lastStart = sortedTimesByDate[lastDay][0].start;\n    return sortedDates.slice(0,MAX_DAYS_IN_LIST - 1).map(dateRowFactory).concat(\n      <p>\n        More Times from {nextStart.twix(lastStart, { allDay : true }).format()}\n      </p>\n    )\n  }\n}\n\nexport function EventList(props) {\n\n  // if we have a event selected on the map, and highlighted in the list\n  // lets scroll to see it.\n  useLayoutEffect(() => {\n    if (!props.highlightedEvent.id) return;\n    var card = document.querySelector(`a.eventCard[eventid='${props.highlightedEvent.id}']`);\n    if (card){\n      card.scrollIntoView(true);\n    }\n  }, [props.highlightedEvent, props.inViewEvents])\n\n\n  // Filter based on the events that are currently in view.\n  var eventCount = 0;\n  var inViewEvents = props.events.filter(event => {\n    // limit to top matching events. to avoid list updating perf issues.\n    if (eventCount > 30) return false;\n    if (props.inViewEvents[event.id]) {\n      eventCount +=1;\n      return true;\n    }\n    return false;\n  })\n\n  const listEvents = inViewEvents.map((event, i) => {\n\n    // Normalize Mobilize's time formatting into\n    // easy-to-use moments\n    let rawTimes = event['timeslots'].map((timeslot) => {\n      let start = moment(timeslot.start_date * 1000);\n      let end = moment(timeslot.end_date * 1000);\n      return {\n        start, end,\n        range: start.twix(end)\n      }\n    })\n    var liClass = 'event';\n    if (props.highlightedEvent.id === event.id) liClass = 'event highlighted';\n\n    return (\n      <a href={event['browser_url']}\n        className=\"eventCard\"\n        target=\"_blank\"\n        key={event['id']}\n        eventid={event['id']}\n        onMouseEnter={(event) => { props.updatedHover({id: event['currentTarget'].getAttribute('eventid'), center:false}) }}\n        onMouseLeave={(event) => { props.updatedHover({}) }}>\n        <li className={liClass}>\n          <div>\n            <h3>{event['title']}</h3>\n            <p><strong>{event['location']['venue']}</strong> in <strong>{event['location']['locality']}</strong></p>\n            <EventTimes rawTimes={rawTimes} />\n            <p className=\"eventRSVP\">Click to RSVP</p>\n          </div>\n        </li>\n      </a>\n    )\n  });\n\n  listEvents.push((<div className=\"eventCard\" key=\"noevent\"><li>\n    <div>\n      <p>\n        <strong>Don't see an event near you? </strong><br />\n        <a href=\"https://events.elizabethwarren.com/?is_virtual=true\" target=\"_blank\">Join a virtual event</a> or\n        <a href=\"https://events.elizabethwarren.com/event/create/\" target=\"_blank\">host your own event!</a>\n      </p>\n    </div>\n  </li></div>))\n\n  return (\n    <ul className=\"eventList\">{listEvents}</ul>\n  );\n}\n\nexport default EventList;\n","import React, { useState } from 'react';\nimport EventList from './EventList';\n\nexport function SearchBar(props){\n\n  const[input, setInput] = useState(\"\");\n\n  function onlySetNumbers(event){\n    let baseValue = event.target.value;\n    let replacedVal = baseValue.replace(/\\D*/g, '')\n    setInput(replacedVal)\n  }\n\n  function onSubmit(event){\n    event.preventDefault();\n    props.updateZip(input)\n  }\n\n  var eventlist = [];\n  if (props.locFilt !== null || props.nearby !== null) {\n    eventlist = (<EventList events={props.events} inViewEvents={props.inViewEvents} highlightedEvent={props.highlightedEvent} updatedHover={(item) => props.updatedHover(item)}/>)\n  }\n\n  return(\n    <div className={(props.locFilt !== null || props.nearby !== null) ? \"searchBar activeList\" : \"searchBar\"}>\n      <form onSubmit= {onSubmit} id = \"zipForm\">\n        <input type=\"text\" id=\"zipInput\" value={input} onChange={onlySetNumbers} placeholder=\"ZIP\" required minLength=\"5\" maxLength=\"5\"></input>\n      </form>\n      { eventlist }\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, { useState, useEffect, useRef } from 'react';\nimport mapboxgl from 'mapbox-gl';\n\nrequire('mapbox-gl/dist/mapbox-gl.css');\nexport function Map(props){\n\n  const [locations, setLocations] = useState([]);\n  const [mapReady, setMapReady] = useState(false);\n  const map = useRef();\n  const prevHighlightId = useRef()\n\n  //First render\n  useEffect(() => {\n    // Create the map with US center\n    mapboxgl.accessToken = 'pk.eyJ1IjoibWlja3QiLCJhIjoiLXJIRS1NbyJ9.EfVT76g4A5dyuApW_zuIFQ';\n\t\tmap.current = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mickt/ck0rlk9834i721clibn70ajsa',\n      zoom: 3,\n      hash: true,\n      center: [-98.5795, 39.8283]\n\t\t});\n    map.current.on('load', _ => {\n\n      map.current.addSource('locations', {\n        \"type\": \"geojson\",\n        \"data\": {type: 'FeatureCollection', features: []}\n      });\n\n\n      map.current.addLayer({\n        \"id\": \"event-locations\",\n        \"source\": \"locations\",\n        \"type\": \"symbol\",\n        \"layout\": {\n          \"icon-allow-overlap\": true,\n          \"icon-anchor\": \"bottom\",\n          \"icon-size\": 0.5,\n          \"icon-image\": \"w-marker-icon\"\n        },\n        \"paint\": {\n          \"icon-opacity\": [\n            \"match\", [\"feature-state\", \"highlight\"],\n            1, 0,\n            1\n          ]\n        }\n      });\n\n      map.current.addLayer({\n        \"id\": \"event-locations-highlight\",\n        \"source\": \"locations\",\n        \"type\": \"symbol\",\n        \"layout\": {\n          \"icon-allow-overlap\": true,\n          \"icon-image\": \"w-marker-icon-highlighted\",\n          \"icon-anchor\": \"bottom\",\n          \"icon-size\": 0.6\n        },\n        \"paint\": {\n          \"icon-opacity\": [\n            \"match\", [\"feature-state\", \"highlight\"],\n            1, 1,\n            0\n          ]\n        }\n      });\n\n      // Center the map on the coordinates of any clicked symbol from the 'symbols' layer.\n      map.current.on('click', 'event-locations', function (e) {\n        if (e.features && e.features.length > 0) {\n          console.log(e.features[0])\n          props.selectEvent({id: e.features[0].id, center: e.features[0].geometry.coordinates});\n        }\n      });\n\n      // Change the cursor to a pointer when the it enters a feature in the 'symbols' layer.\n      map.current.on('mouseenter', 'event-locations', function () {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n\n      // Change it back to a pointer when it leaves.\n      map.current.on('mouseleave', 'event-locations', function () {\n        map.current.getCanvas().style.cursor = '';\n      });\n\n      function inViewFeatures() {\n        var features = map.current.queryRenderedFeatures({ layers: ['event-locations', 'event-locations-highlight'] });\n        var inView = {};\n        features.forEach(f => {\n          inView[f.id] = true;\n        });\n        props.inViewEvents(inView);\n      }\n\n      // if the map moves, update the list of features in view.\n      map.current.on('moveend', inViewFeatures);\n      map.current.on('idle', inViewFeatures);\n\n\n      setMapReady(true)\n    })\n  }, []);\n\n  function highlight(currentId, center) {\n    console.log('highlight', prevHighlightId.current, currentId)\n    if (prevHighlightId.current) map.current.setFeatureState({source: 'locations', id: prevHighlightId.current}, { highlight: 0});\n\n    if (currentId) map.current.setFeatureState({source: 'locations', id: currentId}, { highlight: 1});\n\n    prevHighlightId.current = currentId;\n    if (center)\n    map.current.flyTo({center: center, zoom: 10});\n  }\n\n  useEffect(() => {\n    if (mapReady === false) return;\n    console.log(props.highlightedEvent)\n    highlight(props.highlightedEvent.id, props.highlightedEvent.center);\n  }, [ props.highlightedEvent, mapReady])\n\n\n  useEffect(() => {\n    if (mapReady === false) return;\n\n    var geojson = {type: 'FeatureCollection', features: locations};\n    map.current.getSource('locations').setData(geojson);\n  }, [locations, mapReady])\n\n  //Iterates through new events\n  useEffect(() => {\n    if (props.events === null) return;\n\n    var places = props.events.map(e => {\n      return {\n        type: 'Feature',\n        id: e.id,\n        properties:{},\n        geometry: {\n          type: 'Point',\n          coordinates: [\n            parseFloat(e.location.location.longitude),\n            parseFloat(e.location.location.latitude)\n          ]\n        }\n      }\n    })\n    setLocations(places);\n  }, [props.events]);\n\n\n  return(\n    <div id=\"map\"></div>\n  );\n}\n\nexport default Map;\n","import React, {useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport Map from './Map';\nimport './App.scss';\n\nfunction App() {\n  //List of events\n  const [events, setEvents] = useState([]);\n  //Current zip code search - input by user\n  const [currZip, setCurrZip] = useState(null);\n  //Current selected event\n  const [highlightedEvent, setHighlightedEvent] = useState({});\n  //Events that are within the map viewport.  These should be shown in the list\n  const [inViewEvents, setInViewEvents] = useState({});\n\n  // Load all of the events\n  useEffect(() => {\n      fetch(\"https://warren-events.s3.amazonaws.com/data/events.json\")\n      .then((res)=>res.json())\n      .then((data)=>{\n        setEvents(data)\n      });\n  }, []);\n\n  useEffect(() => {\n    // Use the mobilizemaerica api to look up zipcode to nearest event.\n    if(currZip == null) return;\n    fetch(\"https://api.mobilize.us/v1/organizations/1316/events?timeslot_start=gte_now&zipcode=\" + currZip)\n    .then((res)=>res.json())\n    .then(res => {\n      if (res.data && res.data.length > 0){\n        let event = res.data[0]\n        setHighlightedEvent({id: event.id, center:true})\n      }\n\n    })\n\n    // Reset states on new zipcode\n    setHighlightedEvent({});\n  }, [currZip])\n\n  return (\n    <div className=\"app\">\n      <SearchBar currZip={currZip} updateZip={(newZip) => setCurrZip(newZip)} events={events} inViewEvents={inViewEvents} updatedHover={(newHover) => setHighlightedEvent(newHover)} highlightedEvent={highlightedEvent}/>\n      <Map events={events} selectEvent={(newLoc) => setHighlightedEvent(newLoc)} highlightedEvent={highlightedEvent} inViewEvents={(keys) => setInViewEvents(keys)}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}