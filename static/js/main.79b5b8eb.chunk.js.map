{"version":3,"sources":["EventList.js","SearchBar.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["require","MAX_DAYS_IN_LIST","EventTimes","props","rawTimes","sortedTimesByDate","groupBy","sortBy","item","start","unix","format","sortedDates","Object","keys","sort","dateRowFactory","date","times","dayStr","timeStrs","map","time","range","hideDate","join","key","length","nextDay","lastDay","nextStart","lastStart","slice","concat","twix","allDay","EventList","locFilt","nearBy","listEvents","events","filter","event","locKey","inViewEvents","indexOf","i","timeslot","moment","start_date","end","end_date","href","className","target","coord","onMouseEnter","updatedHover","getAttribute","onMouseLeave","push","SearchBar","useState","input","setInput","eventlist","nearby","onSubmit","preventDefault","updateZip","id","type","value","onChange","replacedVal","replace","placeholder","required","minLength","maxLength","Map","locations","setLocations","mapReady","setMapReady","useRef","highlight","flyto","newlocs","l","properties","current","flyTo","center","geometry","coordinates","zoom","useEffect","mapboxgl","accessToken","container","style","hash","on","_","inViewFeatures","queryRenderedFeatures","layers","f","addSource","features","addLayer","e","selectLoc","getCanvas","cursor","hoverMarker","geojson","getSource","setData","places","location","longitude","latitude","parseFloat","App","setEvents","currZip","setCurrZip","hoverEvent","setHoverEvent","setLocFilt","setInViewEvents","fetch","then","res","json","data","newZip","newHover","newLoc","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79b5b8eb.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport groupBy from 'lodash.groupby';\nimport sortBy from 'lodash.sortby';\nrequire('twix');\n\nconst MAX_DAYS_IN_LIST = 4;\n\nfunction EventTimes(props) {\n  const { rawTimes } = props;\n  let sortedTimesByDate = groupBy(sortBy(rawTimes,\n    // Sort all of the ranges by when they start;\n    // Unix returns the millisecond time, so all\n    // events will be different\n    (item) => { return item.start.unix() }),\n    // Group the ranges by the day they happen on;\n    // fully including the year, month, and day\n    // in that order guarantees that normal sorting\n    // will respect 9/31 v 10/1, and 2020/01 vs 2019/12\n    (item) => { return item.start.format('YYYY-MM-DD') }\n  )\n\n  let sortedDates = Object.keys(sortedTimesByDate).sort();\n\n  const dateRowFactory = (date) => {\n    let times = sortedTimesByDate[date];\n    let dayStr = times[0].start.format('ddd M/D')\n    let timeStrs = times.map((time) => time.range.format({ hideDate : true })).join(', ')\n    return (\n      <p key={`time-${date}`}>\n        { dayStr }{' | '}{ timeStrs }\n      </p>\n    )\n  }\n\n  if (sortedDates.length <= MAX_DAYS_IN_LIST) {\n    return sortedDates.map(dateRowFactory)\n  } else {\n    let nextDay = sortedDates[MAX_DAYS_IN_LIST - 1];\n    let lastDay = sortedDates[sortedDates.length - 1];\n    let nextStart = sortedTimesByDate[nextDay][0].start;\n    let lastStart = sortedTimesByDate[lastDay][0].start;\n    return sortedDates.slice(0,MAX_DAYS_IN_LIST - 1).map(dateRowFactory).concat(\n      <p>\n        More Times from {nextStart.twix(lastStart, { allDay : true }).format()}\n      </p>\n    )\n  }\n}\n\nexport function EventList(props) {\n  if (!props.locFilt && !props.nearBy) {\n\n  }\n  // Filter based on the events that are currently in view.\n  var inViewEvents = props.events.filter(event => {\n    var locKey = event['location']['location']['longitude'] + '&' + event['location']['location']['latitude'];\n    return props.inViewEvents.indexOf(locKey) >= 0\n  })\n\n  const listEvents = inViewEvents.map((event, i) => {\n\n    // Normalize Mobilize's time formatting into\n    // easy-to-use moments\n    let rawTimes = event['timeslots'].map((timeslot) => {\n      let start = moment(timeslot.start_date * 1000);\n      let end = moment(timeslot.end_date * 1000);\n      return {\n        start, end,\n        range: start.twix(end)\n      }\n    })\n\n    return (\n      <a href={event['browser_url']}\n        className=\"eventCard\"\n        target=\"_blank\"\n        key={event['id']}\n        coord={('location' in event && 'location' in event['location'] && 'latitude' in event['location']['location']) ? \"\" + event['location']['location']['longitude'] + \"&\" + event['location']['location']['latitude'] : \"\"}\n        onMouseEnter={(event) => { props.updatedHover(event['currentTarget'].getAttribute('coord')) }}\n        onMouseLeave={(event) => { props.updatedHover(null) }}>\n        <li className=\"event\">\n          <div>\n            <h3>{event['title']}</h3>\n            <p><strong>{event['location']['venue']}</strong> in <strong>{event['location']['locality']}</strong></p>\n            <EventTimes rawTimes={rawTimes} />\n            <p className=\"eventRSVP\">Click to RSVP</p>\n          </div>\n        </li>\n      </a>\n    )\n  });\n\n  listEvents.push((<div className=\"eventCard\" key=\"noevent\"><li>\n    <div>\n      <p><strong>Don't see an event near you? </strong><br /><a href=\"https://events.elizabethwarren.com/?is_virtual=true\">Join a virtual event</a> or <a href=\"https://events.elizabethwarren.com/event/create/\">host your own event!</a></p>\n    </div>\n  </li></div>))\n\n  return (\n    <ul className=\"eventList\">{listEvents}</ul>\n  );\n}\n\nexport default EventList;\n","import React, { useState } from 'react';\nimport EventList from './EventList';\n\nexport function SearchBar(props){\n\n  const[input, setInput] = useState(\"\");\n\n  function onlySetNumbers(event){\n    let baseValue = event.target.value;\n    let replacedVal = baseValue.replace(/\\D*/g, '')\n    setInput(replacedVal)\n  }\n\n  function onSubmit(event){\n    event.preventDefault();\n    props.updateZip(input)\n  }\n\n  var eventlist = [];\n  if (props.locFilt !== null || props.nearby !== null) {\n    eventlist = (<EventList events={props.events} inViewEvents={props.inViewEvents} locFilt={props.locFilt} updatedHover={(item) => props.updatedHover(item)}/>)\n  }\n\n  return(\n    <div className={(props.locFilt !== null || props.nearby !== null) ? \"searchBar activeList\" : \"searchBar\"}>\n      <form onSubmit= {onSubmit} id = \"zipForm\">\n        <input type=\"text\" id=\"zipInput\" value={input} onChange={onlySetNumbers} placeholder=\"ZIP\" required minLength=\"5\" maxLength=\"5\"></input>\n      </form>\n      { eventlist }\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, { useState, useEffect, useRef } from 'react';\nimport mapboxgl from 'mapbox-gl';\n\nrequire('mapbox-gl/dist/mapbox-gl.css');\nexport function Map(props){\n\n  const [locations, setLocations] = useState([]);\n  const [mapReady, setMapReady] = useState(false);\n  const map = useRef();\n\n  //First render\n  useEffect(() => {\n    // Create the map with US center\n    mapboxgl.accessToken = 'pk.eyJ1IjoibWlja3QiLCJhIjoiLXJIRS1NbyJ9.EfVT76g4A5dyuApW_zuIFQ';\n\t\tmap.current = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mickt/ck0rlk9834i721clibn70ajsa',\n      zoom: 3,\n      hash: true,\n      center: [-98.5795, 39.8283]\n\t\t});\n    map.current.on('load', _ => {\n\n      map.current.addSource('locations', {\n        \"type\": \"geojson\",\n        \"data\": {type: 'FeatureCollection', features: []}\n      });\n\n\n      map.current.addLayer({\n        \"id\": \"event-locations\",\n        \"source\": \"locations\",\n        \"type\": \"symbol\",\n        \"layout\": {\n          \"icon-allow-overlap\": true,\n          \"icon-image\": \"w-marker-icon\",\n          \"icon-anchor\": \"bottom\",\n          \"icon-size\": 0.5\n        },\n        \"filter\": [\"!=\", \"highlight\", true]\n      });\n      map.current.addLayer({\n        \"id\": \"event-locations-highlight\",\n        \"source\": \"locations\",\n        \"type\": \"symbol\",\n        \"layout\": {\n          \"icon-allow-overlap\": true,\n          \"icon-image\": \"w-marker-icon-highlighted\",\n          \"icon-anchor\": \"bottom\",\n          \"icon-size\": 0.6\n        },\n        \"filter\": [\"==\", \"highlight\", true]\n      });\n\n      // Center the map on the coordinates of any clicked symbol from the 'symbols' layer.\n      map.current.on('click', 'event-locations', function (e) {\n        if (e.features && e.features.length > 0) {\n          props.selectLoc(e.features[0].properties.locKey);\n        }\n      });\n\n      // Change the cursor to a pointer when the it enters a feature in the 'symbols' layer.\n      map.current.on('mouseenter', 'event-locations', function () {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n\n      // Change it back to a pointer when it leaves.\n      map.current.on('mouseleave', 'event-locations', function () {\n        map.current.getCanvas().style.cursor = '';\n      });\n\n      function inViewFeatures() {\n        var features = map.current.queryRenderedFeatures({ layers: ['event-locations', 'event-locations-highlight'] });\n        var keys = features.map(f => {\n          return f.properties.locKey;\n        });\n        props.inViewEvents(keys);\n      }\n\n      // if the map moves, update the list of features in view.\n      map.current.on('moveend', inViewFeatures);\n      map.current.on('idle', inViewFeatures);\n\n\n      setMapReady(true)\n    })\n  }, []);\n\n  function highlight(key, flyto) {\n    var newlocs = locations.map(l => {\n      l.properties.highlight = (l.properties.locKey === key)\n      if (flyto && l.properties.locKey === key)\n        map.current.flyTo({center: l.geometry.coordinates, zoom: 10});\n      return l;\n    })\n    setLocations(newlocs);\n  }\n\n  useEffect(() => {\n    highlight(props.locFilt, true);\n  }, [ props.locFilt])\n\n  useEffect(() => {\n    highlight(props.hoverMarker, false);\n  }, [props.hoverMarker])\n\n\n  useEffect(() => {\n    if (mapReady === false) return;\n\n    var geojson = {type: 'FeatureCollection', features: locations};\n    map.current.getSource('locations').setData(geojson);\n  }, [locations, mapReady])\n\n  //Iterates through new events\n  useEffect(() => {\n    if (props.events === null) return;\n\n    var places = props.events.map(e => {\n      return {\n        type: 'Feature',\n        properties:{\n          \"highlight\": false,\n          \"locKey\": e.location.location.longitude + '&' + e.location.location.latitude\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: [\n            parseFloat(e.location.location.longitude),\n            parseFloat(e.location.location.latitude)\n          ]\n        }\n      }\n    })\n    setLocations(places);\n  }, [props.events]);\n\n\n  return(\n    <div id=\"map\"></div>\n  );\n}\n\nexport default Map;\n","import React, {useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport Map from './Map';\nimport './App.scss';\n\nfunction App() {\n  //List of events\n  const [events, setEvents] = useState([]);\n  //Current zip code search - input by user\n  const [currZip, setCurrZip] = useState(null);\n  //Current event being hovered over\n  const [hoverEvent, setHoverEvent] = useState(null);\n  //Current selected location filter\n  const [locFilt, setLocFilt] = useState(null);\n  //Events that are within the map viewport.  These should be shown in the list\n  const [inViewEvents, setInViewEvents] = useState([]);\n\n  // Load all of the events\n  useEffect(() => {\n      fetch(\"https://warren-events.s3.amazonaws.com/data/events.json\")\n      .then((res)=>res.json())\n      .then((data)=>setEvents(data));\n  }, []);\n\n  useEffect(() => {\n    // Use the mobilizemaerica api to look up zipcode to nearest event.\n    if(currZip == null) return;\n    fetch(\"https://api.mobilize.us/v1/organizations/1316/events?timeslot_start=gte_now&zipcode=\" + currZip)\n    .then((res)=>res.json())\n    .then(res => {\n      if (res.data && res.data.length > 0){\n        let event = res.data[0]\n        setLocFilt(event.location.location.longitude +'&'+ event.location.location.latitude)\n      }\n\n    })\n\n    // Reset states on new zipcode\n    setHoverEvent(null);\n    setLocFilt(null);\n  }, [currZip])\n\n  return (\n    <div className=\"app\">\n      <SearchBar currZip={currZip} updateZip={(newZip) => setCurrZip(newZip)} events={events} inViewEvents={inViewEvents} updatedHover={(newHover) => setHoverEvent(newHover)} locFilt={locFilt}/>\n      <Map currZip={currZip} events={events} hoverMarker={hoverEvent} selectLoc={(newLoc) => setLocFilt(newLoc)} locFilt={locFilt} inViewEvents={(keys) => setInViewEvents(keys)}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}